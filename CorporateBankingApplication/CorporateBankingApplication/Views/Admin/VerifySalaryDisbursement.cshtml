
@model IEnumerable<CorporateBankingApplication.DTOs.EmployeeSalaryDisbursementDTO>

@{
    ViewBag.Title = "Verify Salary Disbursement";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div>
    <h2 class="text-center my-4 pt-3">Salary Disbursements Requests</h2>
    <!-- Add search input field for company name -->
    <div class="form-group mb-5">
        <input type="text" id="searchCompany" class="form-control" placeholder="Search by Company's Name..." />
    </div>
    <table id="salaryDisbursementsTable" class="table text-center">
        <thead class="thead-dark my-3">
            <tr>
                <th>
                    <!-- Select All Checkbox -->
                    <input type="checkbox" id="selectAll" />
                    Select All
                </th>
                <th>Company Name</th>
                <th>Employee First Name</th>
                <th>Employee Last Name</th>
                <th>Salary</th>
                <th>Disbursement Date</th>

            </tr>
        </thead>
        <tbody id="salaryApprovalBody">
            @if (Model != null && Model.Any())
            {
                foreach (var disbursement in Model)
                {
                    <tr>
                        <td>
                            <input type="checkbox" class="salary-checkbox"
                                   value="@disbursement.SalaryDisbursementId" />
                        </td>
                        <td>@disbursement.CompanyName</td>
                        <td>@disbursement.EmployeeFirstName</td>
                        <td>@disbursement.EmployeeLastName</td>
                        <td>@disbursement.Salary.ToString("F2")</td>
                        <td>@disbursement.DisbursementDate.ToShortDateString()</td>

                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="8" class="text-center">No pending salary disbursements available.</td>
                </tr>
            }
        </tbody>
    </table>
    @if (Model != null && Model.Any())
    {
        <button id="approveSelected" class="btn btn-outline-dark">Approve</button>
        <button id="rejectSelected" class="btn btn-outline-dark">Reject</button>
    }
    <br />
    @Html.ActionLink("Go Back To Dashboard", "AdminDashboard", null, new { @class = "btn btn-lg btn-primary my-5" })

    <!-- Pagination Controls -->
    <div id="paginationControls" class="d-flex justify-content-between mt-4">
        <button id="prevPage" class="btn btn-outline-dark" disabled>Previous</button>
        <span id="pageInfo">Page 1</span>
        <button id="nextPage" class="btn btn-outline-dark">Next</button>
    </div>
</div>
<div class="loader-overlay" style="display:none;" id="loader">
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
</div>

<!-- Rejection Reason Modal -->
<div class="modal fade" id="rejectionReasonModal" tabindex="-1" role="dialog" aria-labelledby="rejectionReasonModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header bg-primary" style="display: flex; justify-content: space-between; align-items: center;">
                <h5 class="modal-title" id="rejectionReasonModalLabel">Rejection Reason</h5>
                <button type="button" class="closeRejectionPopup border-0 bg-transparent text-light btn-lg" data-dismiss="modal" aria-label="Close" style="font-size: 2rem; line-height: 1;">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <textarea id="rejectionReason" class="form-control" rows="4" placeholder="Please provide the reason for rejection"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary closeRejectionPopup" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="submitRejectionReason">Submit</button>
            </div>
        </div>
    </div>
</div>


<style>
    /* Full-screen overlay to cover the whole page */
    .loader-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* High z-index to make sure it stays on top */
    }

    /* Optional to remove page scrolling */
    body.loader-active {
        overflow: hidden;
    }
</style>
@section Scripts {

    <script src="~/Scripts/jquery-3.7.1.min.js"></script>
    <script>

        var currentPage = 1; // Start on the first page
var rowsPerPage = 5; // Set number of rows per page
var totalRows = @Model.Count(); // Total number of rows in the table
        var totalPages = Math.ceil(totalRows / rowsPerPage); // Total number of pages

        // Function to update the table for the current page
        function updateTable() {
            var startRow = (currentPage - 1) * rowsPerPage;
            var endRow = startRow + rowsPerPage;

            $('#salaryApprovalBody tr').hide();
            $('#salaryApprovalBody tr').slice(startRow, endRow).show();

            //updating pagination btns 
            $('#pageInfo').text("Page " + currentPage + " of " + totalPages);
            $('#prevPage').prop('disabled', currentPage === 1);
            $('#nextPage').prop('disabled', currentPage === totalPages);
        }

        updateTable();

        //pagination btn event handlers
        $('#prevPage').click(function () {
            if (currentPage > 1) {
                currentPage--;
                updateTable();
            }
        });

        $('#nextPage').click(function () {
            if (currentPage < totalPages) {
                currentPage++;
                updateTable();
            }
        });

        function showLoader() {
            $("#loader").show();
            setTimeout(function () {
                hideLoader();
            }, 5000);
        }

        function hideLoader() {
            $("#loader").hide();
        }

        // Get selected checkboxes
        function getSelectedDisbursements() {
            var selectedIds = [];
            $(".salary-checkbox:checked").each(function () {
                selectedIds.push($(this).val());
            });
            return selectedIds;
        }
        //select/ deselect all checkboxes when "Select All" is clicked
        $('#selectAll').change(function () {
            $('.salary-checkbox').prop('checked', this.checked);
        });

        // If an individual checkbox is unchecked, uncheck "Select All"
        $('.salary-checkbox').change(function () {
            if (!this.checked) {
                $('#selectAll').prop('checked', false);
            }
            // If all individual checkboxes are checked, check "Select All"
            if ($('.salary-checkbox:checked').length === $('.salary-checkbox').length) {
                $('#selectAll').prop('checked', true);
            }
        })

        // Approve selected disbursements
        $('#approveSelected').click(function () {
            var selectedIds = getSelectedDisbursements();
            if (selectedIds.length === 0) {
                alert("Please select at least one salary disbursement.");
                return;
            }

            showLoader();
            $.ajax({
                type: "POST",
                url: '@Url.Action("ApproveDisbursements", "Admin")',
                data: { disbursementIds: selectedIds },
                traditional: true, // This ensures the array is sent correctly
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert("An error occurred while approving the disbursements: " + error);
                }
            });
        });


        //Reject salary Disbursement
        $('#rejectSelected').click(function () {
            var selectedIds = getSelectedDisbursements();
            if (selectedIds.length === 0) {
                alert("Please select at least one salary disbursement.");
                return;
            }

            //showing the rejection reason modal
            $('#rejectionReasonModal').modal('show');
        });

        $('#submitRejectionReason').click(function () {
            var selectedIds = getSelectedDisbursements();
            var rejectionReason = $('#rejectionReason').val();

            if (!rejectionReason) {
                alert("Please provide a reason for rejection.");
                return;
            }

            showLoader();


            $.ajax({
                type: "POST",
                url: '@Url.Action("RejectDisbursements", "Admin")',
                data: {
                    disbursementIds: selectedIds,
                    reason: rejectionReason
                },
                traditional: true,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert("An error occurred while rejecting the disbursements: " + error);
                }
            });
            $('#rejectionReasonModal').modal('hide');
        });



        function rejectDisbursement(salaryDisbursementId) {
            $.ajax({
                type: "POST",
                url: '@Url.Action("RejectDisbursement", "Admin")',
                data: { salaryDisbursementId: salaryDisbursementId },
                success: function(response) {
                    if (response.success) {
                        alert(response.message);
                        // Optionally refresh the disbursement list or reload the page
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function(xhr, status, error) {
                    alert("An error occurred while rejecting the disbursement: " + error);
                }
            });
        }
        // Search filter for Company Name
        $('#searchCompany').on('keyup', function () {
            var searchText = $(this).val().toLowerCase();
            $('#salaryDisbursementsTable tbody tr').filter(function () {
                $(this).toggle($(this).text().toLowerCase().indexOf(searchText) > -1);
            });
        });
    </script>
}